// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Address,
  Bytes,
  BigInt,
  BigDecimal
} from "@graphprotocol/graph-ts";

export class Profile extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save Profile entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save Profile entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("Profile", id.toString(), this);
  }

  static load(id: string): Profile | null {
    return store.get("Profile", id) as Profile | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get addr(): Bytes {
    let value = this.get("addr");
    return value.toBytes();
  }

  set addr(value: Bytes) {
    this.set("addr", Value.fromBytes(value));
  }

  get canceled(): boolean {
    let value = this.get("canceled");
    return value.toBoolean();
  }

  set canceled(value: boolean) {
    this.set("canceled", Value.fromBoolean(value));
  }

  get commitTime(): BigInt {
    let value = this.get("commitTime");
    return value.toBigInt();
  }

  set commitTime(value: BigInt) {
    this.set("commitTime", Value.fromBigInt(value));
  }

  get type(): string {
    let value = this.get("type");
    return value.toString();
  }

  set type(value: string) {
    this.set("type", Value.fromString(value));
  }

  get url(): string {
    let value = this.get("url");
    return value.toString();
  }

  set url(value: string) {
    this.set("url", Value.fromString(value));
  }

  get name(): string {
    let value = this.get("name");
    return value.toString();
  }

  set name(value: string) {
    this.set("name", Value.fromString(value));
  }

  get profileId(): BigInt {
    let value = this.get("profileId");
    return value.toBigInt();
  }

  set profileId(value: BigInt) {
    this.set("profileId", Value.fromBigInt(value));
  }

  get creationTime(): BigInt {
    let value = this.get("creationTime");
    return value.toBigInt();
  }

  set creationTime(value: BigInt) {
    this.set("creationTime", Value.fromBigInt(value));
  }

  get pledgesInfos(): Array<string | null> {
    let value = this.get("pledgesInfos");
    return value.toStringArray();
  }

  set pledgesInfos(value: Array<string | null>) {
    this.set("pledgesInfos", Value.fromStringArray(value));
  }

  get pledges(): Array<string | null> {
    let value = this.get("pledges");
    return value.toStringArray();
  }

  set pledges(value: Array<string | null>) {
    this.set("pledges", Value.fromStringArray(value));
  }

  get projectInfo(): string | null {
    let value = this.get("projectInfo");
    if (value === null) {
      return null;
    } else {
      return value.toString();
    }
  }

  set projectInfo(value: string | null) {
    if (value === null) {
      this.unset("projectInfo");
    } else {
      this.set("projectInfo", Value.fromString(value as string));
    }
  }
}

export class PledgesInfo extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save PledgesInfo entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save PledgesInfo entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("PledgesInfo", id.toString(), this);
  }

  static load(id: string): PledgesInfo | null {
    return store.get("PledgesInfo", id) as PledgesInfo | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get profile(): string {
    let value = this.get("profile");
    return value.toString();
  }

  set profile(value: string) {
    this.set("profile", Value.fromString(value));
  }

  get token(): string {
    let value = this.get("token");
    return value.toString();
  }

  set token(value: string) {
    this.set("token", Value.fromString(value));
  }

  get lifetimeReceived(): BigInt {
    let value = this.get("lifetimeReceived");
    return value.toBigInt();
  }

  set lifetimeReceived(value: BigInt) {
    this.set("lifetimeReceived", Value.fromBigInt(value));
  }

  get balance(): BigInt {
    let value = this.get("balance");
    return value.toBigInt();
  }

  set balance(value: BigInt) {
    this.set("balance", Value.fromBigInt(value));
  }

  get profileRef(): string {
    let value = this.get("profileRef");
    return value.toString();
  }

  set profileRef(value: string) {
    this.set("profileRef", Value.fromString(value));
  }
}

export class Pledge extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save Pledge entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save Pledge entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("Pledge", id.toString(), this);
  }

  static load(id: string): Pledge | null {
    return store.get("Pledge", id) as Pledge | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get owner(): string | null {
    let value = this.get("owner");
    if (value === null) {
      return null;
    } else {
      return value.toString();
    }
  }

  set owner(value: string | null) {
    if (value === null) {
      this.unset("owner");
    } else {
      this.set("owner", Value.fromString(value as string));
    }
  }

  get amount(): BigInt {
    let value = this.get("amount");
    return value.toBigInt();
  }

  set amount(value: BigInt) {
    this.set("amount", Value.fromBigInt(value));
  }

  get token(): string {
    let value = this.get("token");
    return value.toString();
  }

  set token(value: string) {
    this.set("token", Value.fromString(value));
  }

  get commitTime(): BigInt {
    let value = this.get("commitTime");
    return value.toBigInt();
  }

  set commitTime(value: BigInt) {
    this.set("commitTime", Value.fromBigInt(value));
  }

  get nDelegates(): BigInt {
    let value = this.get("nDelegates");
    return value.toBigInt();
  }

  set nDelegates(value: BigInt) {
    this.set("nDelegates", Value.fromBigInt(value));
  }

  get intendedProject(): BigInt {
    let value = this.get("intendedProject");
    return value.toBigInt();
  }

  set intendedProject(value: BigInt) {
    this.set("intendedProject", Value.fromBigInt(value));
  }

  get pledgeState(): i32 {
    let value = this.get("pledgeState");
    return value.toI32();
  }

  set pledgeState(value: i32) {
    this.set("pledgeState", Value.fromI32(value));
  }

  get creationTime(): BigInt {
    let value = this.get("creationTime");
    return value.toBigInt();
  }

  set creationTime(value: BigInt) {
    this.set("creationTime", Value.fromBigInt(value));
  }

  get oldPledge(): string | null {
    let value = this.get("oldPledge");
    if (value === null) {
      return null;
    } else {
      return value.toString();
    }
  }

  set oldPledge(value: string | null) {
    if (value === null) {
      this.unset("oldPledge");
    } else {
      this.set("oldPledge", Value.fromString(value as string));
    }
  }

  get creatorAddr(): Bytes {
    let value = this.get("creatorAddr");
    return value.toBytes();
  }

  set creatorAddr(value: Bytes) {
    this.set("creatorAddr", Value.fromBytes(value));
  }
}

export class ProjectInfo extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save ProjectInfo entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save ProjectInfo entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("ProjectInfo", id.toString(), this);
  }

  static load(id: string): ProjectInfo | null {
    return store.get("ProjectInfo", id) as ProjectInfo | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get profile(): string | null {
    let value = this.get("profile");
    if (value === null) {
      return null;
    } else {
      return value.toString();
    }
  }

  set profile(value: string | null) {
    if (value === null) {
      this.unset("profile");
    } else {
      this.set("profile", Value.fromString(value as string));
    }
  }

  get title(): string | null {
    let value = this.get("title");
    if (value === null) {
      return null;
    } else {
      return value.toString();
    }
  }

  set title(value: string | null) {
    if (value === null) {
      this.unset("title");
    } else {
      this.set("title", Value.fromString(value as string));
    }
  }

  get subtitle(): string | null {
    let value = this.get("subtitle");
    if (value === null) {
      return null;
    } else {
      return value.toString();
    }
  }

  set subtitle(value: string | null) {
    if (value === null) {
      this.unset("subtitle");
    } else {
      this.set("subtitle", Value.fromString(value as string));
    }
  }

  get creator(): string | null {
    let value = this.get("creator");
    if (value === null) {
      return null;
    } else {
      return value.toString();
    }
  }

  set creator(value: string | null) {
    if (value === null) {
      this.unset("creator");
    } else {
      this.set("creator", Value.fromString(value as string));
    }
  }

  get repo(): string | null {
    let value = this.get("repo");
    if (value === null) {
      return null;
    } else {
      return value.toString();
    }
  }

  set repo(value: string | null) {
    if (value === null) {
      this.unset("repo");
    } else {
      this.set("repo", Value.fromString(value as string));
    }
  }

  get avatar(): string | null {
    let value = this.get("avatar");
    if (value === null) {
      return null;
    } else {
      return value.toString();
    }
  }

  set avatar(value: string | null) {
    if (value === null) {
      this.unset("avatar");
    } else {
      this.set("avatar", Value.fromString(value as string));
    }
  }

  get goal(): string | null {
    let value = this.get("goal");
    if (value === null) {
      return null;
    } else {
      return value.toString();
    }
  }

  set goal(value: string | null) {
    if (value === null) {
      this.unset("goal");
    } else {
      this.set("goal", Value.fromString(value as string));
    }
  }

  get goalToken(): string | null {
    let value = this.get("goalToken");
    if (value === null) {
      return null;
    } else {
      return value.toString();
    }
  }

  set goalToken(value: string | null) {
    if (value === null) {
      this.unset("goalToken");
    } else {
      this.set("goalToken", Value.fromString(value as string));
    }
  }

  get description(): string | null {
    let value = this.get("description");
    if (value === null) {
      return null;
    } else {
      return value.toString();
    }
  }

  set description(value: string | null) {
    if (value === null) {
      this.unset("description");
    } else {
      this.set("description", Value.fromString(value as string));
    }
  }

  get chatRoom(): string | null {
    let value = this.get("chatRoom");
    if (value === null) {
      return null;
    } else {
      return value.toString();
    }
  }

  set chatRoom(value: string | null) {
    if (value === null) {
      this.unset("chatRoom");
    } else {
      this.set("chatRoom", Value.fromString(value as string));
    }
  }

  get isPlaying(): boolean {
    let value = this.get("isPlaying");
    return value.toBoolean();
  }

  set isPlaying(value: boolean) {
    this.set("isPlaying", Value.fromBoolean(value));
  }

  get type(): string | null {
    let value = this.get("type");
    if (value === null) {
      return null;
    } else {
      return value.toString();
    }
  }

  set type(value: string | null) {
    if (value === null) {
      this.unset("type");
    } else {
      this.set("type", Value.fromString(value as string));
    }
  }

  get file(): string | null {
    let value = this.get("file");
    if (value === null) {
      return null;
    } else {
      return value.toString();
    }
  }

  set file(value: string | null) {
    if (value === null) {
      this.unset("file");
    } else {
      this.set("file", Value.fromString(value as string));
    }
  }
}
